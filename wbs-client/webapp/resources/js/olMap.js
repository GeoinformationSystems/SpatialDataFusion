// olMap object
function olMap(div, crs, zoom, center_wgs84, coordDiv) {

	this.div = div;
	this.crs = crs;
	this.zoom = zoom;
	this.coordDiv = coordDiv;
	this.center = ol.proj.transform(center_wgs84, ol.proj.get("EPSG:4326"), this.crs);
	
	this.swipe = document.getElementById('swipe');
	this.div_swipe = document.getElementById('d_swipe');
	
	// associative array object for basemaps
	this.basemaps = [];
	// selected basemap keys
	this.selectedBasemaps = [];

    // associative array object for overlays
    this.overlays = [];
    // selected basemap keys
    this.selectedOverlays = [];
	
	// init map with associative array (key : layer)
	this.initMap = function(basemaps, overlays, defaultKey) {
		if(!(defaultKey in basemaps))
			return;
		this.basemaps = basemaps;
        this.overlays = overlays;
		this.selectedBasemaps.push(defaultKey);
		this.initDisplay(defaultKey);
	}
	
	// initialize map display
	this.initDisplay = function(defaultKey) {
		this.map = new ol.Map ({
			controls: ol.control.defaults({
				mouseWheelZoom:false
			}).extend([f_getMousePositionControl(coordDiv, "4326")]),
			target: div,
			layers: [this.basemaps[defaultKey]],
			view: new ol.View({
				projection: this.crs,
				center: this.center,
				zoom: this.zoom
			})
		});
	}
	
	// add basemap
	this.addBasemap = function(key) {
		if(key in this.basemaps && this.selectedBasemaps.indexOf(key) === -1){
			this.selectedBasemaps.push(key);
			this.map.addLayer(this.basemaps[key]);
		}
	}

    // add overlay
    this.addOverlay = function(key) {
        if(key in this.overlays && this.selectedOverlays.indexOf(key) === -1){
            this.selectedOverlays.push(key);
            this.map.addLayer(this.overlays[key]);
        }
    }
	
	// remove basemap
	this.removeBasemap = function(key) {
		if(this.selectedBasemaps.indexOf(key) !== -1){
			this.map.removeLayer(this.basemaps[key]);
			this.selectedBasemaps.splice(this.selectedBasemaps.indexOf(key));
		}
	}

    // remove overlay
    this.removeOverlay = function(key) {
        if(this.selectedOverlays.indexOf(key) !== -1){
            this.map.removeLayer(this.overlays[key]);
            this.selectedOverlays.splice(this.selectedOverlays.indexOf(key));
        }
    }
	
	// update selected layers (called from bean)
	this.updateBasemap = function(keys) {
		var layerKeys = keys.split(";");
		if(layerKeys.length == 0)
			return;
		// remove basemap
		for(var i=0; i<this.selectedBasemaps.length; i++){
			if(layerKeys.indexOf(this.selectedBasemaps[i]) === -1)
				this.removeBasemap(this.selectedBasemaps[i]);
		}
		// add layer
		for(var i=0; i<layerKeys.length; i++){
			this.addBasemap(layerKeys[i]);
		}
		//set swipe effect
		this.setSwipe();
	}

    // update selected layers (called from bean)
    this.updateOverlays = function(keys) {
        var layerKeys = keys.split(";");
        if(layerKeys.length == 0)
            return;
        // remove layer
        for(var i=0; i<this.selectedOverlays.length; i++){
            if(layerKeys.indexOf(this.selectedOverlays[i]) === -1)
                this.removeOverlay(this.selectedOverlays[i]);
        }
        // add layer
        for(var i=0; i<layerKeys.length; i++){
            this.addOverlay(layerKeys[i]);
        }
    }
	
	// remove layer from map
	this.removeLayer = function(key) {
		this.map.removeLayer(this.layers[key]);
	}
	
	// set swipe interaction
	this.setSwipe = function() {
		if(this.selectedBasemaps.length == 2)
			this.activateSwipe(this.selectedBasemaps[0], this.selectedBasemaps[1]);
		else
			this.deactivateSwipe();
	}
	
	// activate swipe interaction
	this.activateSwipe = function(key1, key2) {
		this.swipeLayer = key2;
		this.div_swipe.style.visibility = "visible";
		this.basemaps[this.swipeLayer].on('precompose', this.f_swipeOnPrecompose);
		this.basemaps[this.swipeLayer].on('postcompose', this.f_swipeOnPostcompose);
		this.swipe.addEventListener('input', this.f_swipeInputListener, false);
		this.swipe.value = 0;
	}
	
	// deactivate swipe interaction
	this.deactivateSwipe = function() {
		if(this.swipeLayer == null || this.swipeLayer == undefined)
			return;
		this.div_swipe.style.visibility = "hidden";
		this.basemaps[this.swipeLayer].un('precompose', this.f_swipeOnPrecompose);
		this.basemaps[this.swipeLayer].un('postcompose', this.f_swipeOnPostcompose);
		this.swipe.removeEventListener('input', this.f_swipeInputListener);
	}
	
	//swipe function (onprecompose)
	this.f_swipeOnPrecompose = function(event) {
		var ctx = event.context;
		var width = ctx.canvas.width * (swipe.value / 100);
		ctx.save();
		ctx.beginPath();
		ctx.rect(width, 0, ctx.canvas.width - width, ctx.canvas.height);
		ctx.clip();
	};
	
	//swipe function (onpostcompose)
	this.f_swipeOnPostcompose = function(event) {
		var ctx = event.context;
		ctx.restore();
	};
	
	//swipe function (swipe listener)
	this.f_swipeInputListener = function() {
		olMap.map.render();
	};
	
	// add select interaction for vector overlays
	this.f_addSelectInteraction = function(layer) {
		//set selection layer
		this.selectionLayerKey = layer;
		// add single select on click
		this.selectInteration = f_getSelectInteraction();
		this.map.addInteraction(this.selectInteration);
		this.selectedFeatures = this.selectInteration.getFeatures();
		// add bbox selection
		this.bboxInteraction = f_getBBoxInteraction();
		this.map.addInteraction(this.bboxInteraction);
		this.bboxInteraction.on('boxstart', function() {
			olMap.selectedFeatures.clear();
		});
		this.bboxInteraction.on('boxend', function() {
			var extent = olMap.bboxInteraction.getGeometry().getExtent();
			olMap.layers[olMap.selectionLayerKey].getSource().forEachFeatureIntersectingExtent(extent, function(feature) {
				olMap.selectedFeatures.push(feature);
		    });
		});
		//add highlicht
		this.highlightInteraction = f_getHighlightInteraction();
		this.map.addInteraction(this.highlightInteraction);
		//add JSON representation for selected features
		this.selectedFeatures.on('change:length', function(evt) {
			f_initFeatures([{name:'features', value:olMap.f_getJSONFeatures()}]);
		});
	}
	
	// get features as json string
	this.f_getJSONFeatures = function(){
		var features = olMap.selectedFeatures.getArray();
		if(features.length === 0)
			return "";
		var jFormat = new ol.format.GeoJSON();
		return JSON.stringify(jFormat.writeFeatures(features));
	}

}

//get WMS layer object
function f_getWMSLayer(url, layer) {
	return new ol.layer.Image ({
		 source: new ol.source.ImageWMS ({
	         ratio: 1,
	         url: url,
	         params: {'FORMAT': 'image/png',
	                  'VERSION': '1.1.1',  
	               STYLES: '',
	               LAYERS: layer,
	         }
		})
	});
}

// get OSM layer object
function f_getOSMLayer() {
	return new ol.layer.Tile ({
		source: new ol.source.OSM()
	});
}

// get vector overlay from WFS (uses JSON)
function f_getWFSLayer(url, style) {
	url = url + "&outputformat=application/json";
	return new ol.layer.Vector({
		source: f_getJSONSource(url),
		style: style
	});
}

// get JSON resource from URL
function f_getJSONSource(url) {
	return new ol.source.Vector({
		format: new ol.format.GeoJSON(),
		url: function(extent) {
			return url + '&bbox=' + extent.join(',') + ',EPSG:3857';
		},
		strategy: ol.loadingstrategy.bbox
	});
}

// get default CRS (WGS84 Web Mercator, EPSG:3857)
function getDefaultCRS() {
	return new ol.proj.Projection({
	    code: 'EPSG:3857',
	    units: 'm',
	    axisOrientation: 'neu'
	});
}

//mouse position control for map
function f_getMousePositionControl(div, epsg) {
	return new ol.control.MousePosition ({
	    className: 'custom-mouse-position',
	    projection: 'EPSG:' + epsg,
	    target: document.getElementById(div),
	    coordinateFormat: ol.coordinate.createStringXY(5),
	    undefinedHTML: '&nbsp;'
	});
}

//get select interaction
function f_getSelectInteraction() {
	return new ol.interaction.Select({
		condition: ol.events.condition.click,
	});
}

// get bbox interaction
function f_getBBoxInteraction() {
	return new ol.interaction.DragBox({
	    condition: ol.events.condition.platformModifierKeyOnly,
	});
}

// get highlight interaction
function f_getHighlightInteraction(){
	return new ol.interaction.Select({
		  condition: ol.events.condition.pointerMove, //quite slow, especially if used with WMS GetFeatureInfo
//		  condition: ol.events.condition.never,
//		  style: styleHighlight
	});
}